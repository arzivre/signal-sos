// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    referentialIntegrity = "prisma"
    url                  = env("DATABASE_URL")
}

model People {
    id       String  @id @default(cuid())
    signalId String?
    type     String
    name     String
    email    String
    Signal   Signal? @relation(fields: [signalId], references: [id])
}

model Signal {
    id          String    @id @default(cuid())
    userId      String
    status      Boolean
    type        String
    author      String
    title       String
    location    String?
    latlong     String?
    necessity   String
    description String?
    created_at  DateTime? @default(now())
    updated_at  DateTime?
    people      People[]
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//!  for Next auth

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    signal        Signal[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
